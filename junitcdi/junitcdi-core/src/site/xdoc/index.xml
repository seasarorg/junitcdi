<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
	<properties>
		<title>About</title>
	</properties>
	<body>
		<section name="JUnit CDI Extensions Core">
			<ul>
				<li>
					<a href="#Abstract">概要</a>
				</li>
				<li>
					<a href="#Injection">依存性の注入</a>
				</li>
				<li>
					<a href="#Contexts">コンテキスト</a>
					<ul>
						<li>
							<a href="#TestClassScoped">テストクラス・スコープ</a>
						</li>
					</ul>
				</li>
				<li>
					<a href="#Lifecycle_Methods">ライフサイクルメソッド</a>
					<ul>
						<li>
							<a href="#JUnit4_Lifecycle_Methods">JUnit4のライフサイクルメソッド</a>
						</li>
						<li>
							<a href="#CDI_Lifecycle_Method">CDIのライフサイクルメソッド</a>
						</li>
					</ul>
				</li>
				<li>
					<a href="#Events">イベント</a>
				</li>
				<li>
					<a href="#JNDI">JNDI</a>
				</li>
			</ul>
		</section>

		<section name="Abstract">
			<p>
				<strong>JUnit CDI Extensions Core</strong>
				は，JUnit4 で CDI を利用したテストを行うための基本機能を提供します．
			</p>
			<p>
				テストクラスで CDI を利用するには，
				<code>@RunWith</code>
				アノテーションに
				<code>org.seasar.junitcdi.core.runner.CDI</code>
				クラスを指定します．
			</p>
			<source><![CDATA[
@RunWith(CDI.class)
public class XxxTest {
    ...
}
]]></source>
			<p>
				これにより，CDI コンテナが準備されます．
			</p>
			<p>
				JUnit CDI Extensions では，テストクラス自体も CDI で管理されます．
				そのため，テストクラスの
				<code>.class</code>
				ファイルが作成されるディレクトリには
				<code>META-INF/beans.xml</code>
				ファイルが必要です．
			</p>
			<p>
				Maven2 のディレクトリ構成であれば，
				<code>src/test/resources/META-INF/beans.xml</code>
				を作成します．
			</p>
			<p>
				ファイルの内容は以下のようにルート要素だけで構いません．
				詳細は CDI の仕様書を参照してください．
			</p>
			<source><![CDATA[
<bean></bean>
]]></source>
		</section>

		<section name="Injection">
			<p>
				テストクラスも CDI で管理されるため，通常の bean と同じように
				<code>@Inject</code>
				アノテーションにより bean が注入されます．
			</p>
			<source><![CDATA[
@RunWith(CDI.class)
public class XxxTest {
    @Inject
    XxxBean xxx;
    ...
}
]]></source>
		</section>

		<section name="Contexts">
			<p>
				JUnit CDI Extensions では，CDI 標準のコンテキスト (スコープ) を利用することができます．
			</p>
			<ul>
				<li>
					<code>@ApplicationScoped</code>
				</li>
				<li>
					<code>@Session</code>
				</li>
				<li>
					<code>@Scoped</code>
				</li>
				<li>
					<code>@Singleton</code>
				</li>
				<li>
					<code>@Default</code>
					(デフォルト)
				</li>
			</ul>
			<p>
				いずれのコンテキストもテストメソッドを実行している間だけ有効で，
				テストメソッドの実行が終了するとコンテキストはクリアされます．
			</p>

			<subsection name="TestClassScoped">
				<p>
					JUnit CDI Extensions は，同じテストクラスの複数のメソッドを実行している間有効な，
					独自の「テストクラス・スコープ」を提供します．
				</p>
				<p>
					「テストクラス・スコープ」を使うには，bean に
					<code>org.seasar.junitcdi.core.TestClassScoped</code>
					アノテーションを指定します．
				</p>
				<p>
					以下の例では，テストメソッド
					<code>hoge()</code>
					および
					<code>moge()</code>
					の実行時，フィールド
					<code>xxx</code>
					には同じ bean が注入されます．
				</p>
				<source><![CDATA[
@TestClassScoped
public class XxxBean {
    ...
}

@RunWith(CDI.class)
public class XxxTest {
    @Inject
    XxxBean xxx;

    @Test
    public void hoge() {
        ...
    }

    @Test
    public void moge() {
        ...
    }
    ...
}
]]></source>
				<p>
					テストクラスをまたがったスコープは提供されません．
				</p>
			</subsection>
		</section>

		<section name="Lifecycle Methods">
			<subsection name="JUnit4 Lifecycle Methods">
				<p>
					JUnit CDI Extensions は，JUnit4 標準のライフサイクルメソッドに加えて，
					特定のテストメソッドの前後に呼び出されるライフサイクルメソッドを提供します．
				</p>
				<p>
					特定のテストメソッドの前に呼び出されるメソッドには，
					<code>org.seasar.junitcdi.core.BeforeMethod</code>
					アノテーションを，後に呼び出されるメソッドには
					<code>org.seasar.junitcdi.core.AfterMethod</code>
					を指定します．
				</p>
				<p>
					以下の例では，
					<code>beforeHoge()</code>
					メソッドは
					<code>hoge()</code>
					メソッドが実行される前に，
					<code>afterHoge()</code>
					メソッドは
					<code>hoge()</code>
					メソッドが実行された後に呼び出されます．
				</p>
				<source><![CDATA[
@RunWith(CDI.class)
public class XxxTest {
    @BeforeMethod
    public void beforeFoo() {
        ...
    }
    @Test
    public void foo() {
        ...
    }
    @AfterMethod
    public void afterFoo() {
        ...
    }
    ...
}
]]></source>
				<p>
					デフォルトでは，ライフサイクルメソッドの名前から
					<code>before/after</code>
					を取り除いて先頭を小文字にした名前のテストメソッドが対象となります．
				</p>
				<p>
					アノテーションで対象となるテストメソッドを (複数) 明示することも出来ます．
				</p>
				<p>
					以下の例では，
					<code>before()</code>
					メソッドは
					<code>hoge()</code>
					および
					<code>moge()</code>
					メソッドが実行される前に呼び出されます．
				</p>
				<source><![CDATA[
@RunWith(CDI.class)
public class XxxTest {
    @BeforeMethod({"hoge", "moge"})
    public void before() {
        ...
    }
    @Test
    public void hoge() {
        ...
    }
    @Test
    public void moge() {
        ...
    }
    ...
}
]]></source>
			</subsection>
			<subsection name="CDI Lifecycle Methods">
				<p>
					テストクラスも CDI で管理されるため，通常の bean と同じように
					CDI のライフサイクルメソッドを持つことが出来ます．
				</p>
				<p>
					以下の例では，テストクラスのインスタンスが作成されて DI が終了した後に
					<code>hoge()</code>
					メソッドが，テストが終了してテストクラスのインスタンスが破棄される際に
					<code>moge()</code>
					メソッドが呼び出されます．
				</p>
				<source><![CDATA[
@RunWith(CDI.class)
public class XxxTest {
    @PostConstruct
    public void hoge() {
        ...
    }
    @PreDestroy
    public void moge() {
        ...
    }
    ...
}
]]></source>
			</subsection>
		</section>

		<section name="Events">
			<p>
				JUnitの
				<code>org.junit.runner.notification.RunListener</code>
				による通知を，CDI のイベントとして任意の bean で受信することが出来ます．
			</p>
			<source><![CDATA[
public class XxxBean {
    public void onTestStarted(@Observes @TestStarted Description description) {
        ...
    }
    ...
}
]]></source>
			<p>
				サポートされる通知と対応するアノテーションおよびパラメータの型は以下の通りです．
			</p>
			<table border="1">
				<thead>
					<tr>
						<th>JUnitの通知</th>
						<th>アノテーション</th>
						<th>イベントの型</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>testStarted(Description)</code>
						</td>
						<td>
							<code>org.seasar.junitcdi.core.event.TestStarted</code>
						</td>
						<td>
							<code>org.junit.runner.Description</code>
						</td>
					</tr>
					<tr>
						<td>
							<code>testFinished(Description)</code>
						</td>
						<td>
							<code>org.seasar.junitcdi.core.event.TestFinished</code>
						</td>
						<td>
							<code>org.junit.runner.Description</code>
						</td>
					</tr>
					<tr>
						<td>
							<code>testFailure(Failure)</code>
						</td>
						<td>
							<code>org.seasar.junitcdi.core.event.TestFailure</code>
						</td>
						<td>
							<code>org.junit.runner.notification.Failure</code>
						</td>
					</tr>
					<tr>
						<td>
							<code>testAssumptionFailure(Failure)</code>
						</td>
						<td>
							<code>org.seasar.junitcdi.core.event.TestAssumptionFailure
								</code>
						</td>
						<td>
							<code>org.junit.runner.notification.Failure</code>
						</td>
					</tr>
					<tr>
						<td>
							<code>testIgnored(Description)</code>
						</td>
						<td>
							<code>org.seasar.junitcdi.core.event.TestIgnored</code>
						</td>
						<td>
							<code>org.junit.runner.Description</code>
						</td>
					</tr>
				</tbody>
			</table>
			<p>
				<code>testRunStarted(Description)</code>
				および
				<code>testRunFinished(Result)</code>
				はサポートされません．
			</p>
			<p>
				JUnit CDI Extensions 独自のイベントもあります．
				イベントの型はいずれも
				<code>org.seasar.junitcdi.core.event.TestInfo</code>
				です．
			</p>
			<table border="1">
				<thead>
					<tr>
						<th>アノテーション</th>
						<th>イベントが発生するタイミング</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>org.seasar.junitcdi.core.event.TestMethodStarted</code>
						</td>
						<td>テストメソッドが呼び出される直前</td>
					</tr>
					<tr>
						<td>
							<code>org.seasar.junitcdi.core.event.TestMethodFinished</code>
						</td>
						<td>テストメソッドが呼び出された直後</td>
					</tr>
				</tbody>
			</table>
			<p>
				以下の例では，テストメソッドが呼び出される直前に
				<code>onTestMethodStarted()</code>
				メソッドが呼び出されます．
			</p>
			<source><![CDATA[
public class XxxBean {
    public void onTestMethodStarted(@Observes @TestMethodStarted TestInfo testInfo) {
        ...
    }
    ...
}
]]></source>
			<p>
				テストメソッドに
				<code>Qualifier</code>
				が指定されると，それがイベントにも反映されます．
			</p>
			<p>
				以下の例では，
				<code>hoge()</code>
				メソッドのように
				<code>@Hoge</code>
				で注釈されたテストが実行される前にだけ
				<code>XxxBean</code>
				クラスの
				<code>onHogeStarted()</code>
				メソッドが呼び出されます．
			</p>
			<source><![CDATA[
@Qualifier
@Target( { METHOD, PARAMETER })
@Retention(RUNTIME)
public @interface Hoge {
}

@RunWith(CDI.class)
public class XxxTest {
    @Test
    @Hoge
    public void hoge() {
        ...
    }
    ...
}

public class XxxBean {
    public void onHogeStarted(@Observes @TestStarted @Hoge Description description) {
        ...
    }
    ...
}
]]></source>
			<p>
				テストが正常に実行される際の， ライフサイクルメソッドおよび，
				<code>RunListener</code>
				イベントと JUnit CDI Extensions 独自のイベントが発生する順序関係は以下のようになります．
			</p>
			<table border="1">
				<thead>
					<tr>
						<th>ライフサイクルメソッド</th>
						<th>
							<code>RunListener</code>
							イベント
						</th>
						<th>独自イベント</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>@BeforeClass</code>
						</td>
						<td>
							<code></code>
						</td>
						<td>
							<code></code>
						</td>
					</tr>
					<tr>
						<td>
							<code></code>
						</td>
						<td>
							<code>@TestStarted</code>
						</td>
						<td>
							<code></code>
						</td>
					</tr>
					<tr>
						<td>
							<code>@Before</code>
						</td>
						<td>
							<code></code>
						</td>
						<td>
							<code></code>
						</td>
					</tr>
					<tr>
						<td>
							<code>@BeforeMethod</code>
						</td>
						<td>
							<code></code>
						</td>
						<td>
							<code></code>
						</td>
					</tr>
					<tr>
						<td>
							<code></code>
						</td>
						<td>
							<code></code>
						</td>
						<td>
							<code>@TestMethodStarted</code>
						</td>
					</tr>
					<tr>
						<td>
							<code>@Test</code>
						</td>
						<td>
							<code></code>
						</td>
						<td>
							<code></code>
						</td>
					</tr>
					<tr>
						<td>
							<code></code>
						</td>
						<td>
							<code></code>
						</td>
						<td>
							<code>@TestMethodFinished</code>
						</td>
					</tr>
					<tr>
						<td>
							<code>@AfterMethod</code>
						</td>
						<td>
							<code></code>
						</td>
						<td>
							<code></code>
						</td>
					</tr>
					<tr>
						<td>
							<code>@After</code>
						</td>
						<td>
							<code></code>
						</td>
						<td>
							<code></code>
						</td>
					</tr>
					<tr>
						<td>
							<code></code>
						</td>
						<td>
							<code>@TestFinished</code>
						</td>
						<td>
							<code></code>
						</td>
					</tr>
					<tr>
						<td>
							<code>@AfterClass</code>
						</td>
						<td>
							<code></code>
						</td>
						<td>
							<code></code>
						</td>
					</tr>
				</tbody>
			</table>
		</section>

		<section name="JNDI">
			<p>
				JUnit CDI Extensions は，JNDI 経由で CDI コンテナから bean をルックアップする
				<code>javax.naming.Context</code>
				を提供します．
			</p>
			<p>
				これにより，JNDI でルックアップされるコンポーネントや
				<code>@Resource</code>
				アノテーションで DI されるコンポーネントを bean として用意しておくこくことができます．
			</p>
			<p>
				この JNDI
				<code>Context</code>
				を利用するには，クラスパスに
				<code>jndi.properties</code>
				ファイルを作成して以下の内容を記述します．
			</p>
			<source><![CDATA[
java.naming.factory.initial=org.seasar.junitcdi.core.internal.JndiContextFactory
]]></source>
			<p>
				これで
				<code>InitialContext</code>
				を利用して CDI コンテナから bean をルックアップすることができます．
			</p>
			<source><![CDATA[
DataSource ds = InitialContext.doLookup("java:comp/env/jdbc/DataSource");
]]></source>
			<p>
				あるいは，上記の内容をもった
				<code>Hashtable</code>
				を作成して
				<code>InitialContext</code>
				を作成します．
				<source><![CDATA[
Hashtable<Object, Object> env = new Hashtable<Object, Object>();
env.put(Context.INITIAL_CONTEXT_FACTORY, "org.seasar.junitcdi.core.internal.JndiContextFactory");
Context ctx = new InitialContext(env);
DataSource ds = (DataSource) ctx.lookup("java:comp/env/jdbc/DataSource");
]]></source>
			</p>
		</section>
	</body>
</document>
