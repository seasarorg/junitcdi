<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
	<properties>
		<title>About</title>
	</properties>
	<body>
		<section name="JUnit CDI Extensions for EasyMock">
			<ul>
				<li>
					<a href="#Abstract">概要</a>
				</li>
				<li>
					<a href="#Produces">モックオブジェクトのプロデュース</a>
				</li>
				<li>
					<a href="#EasyMockController">EasyMockController</a>
				</li>
			</ul>
		</section>

		<section name="Abstract">
			<p>
				JUnit CDI Extensions for EasyMock は，テストクラスや bean での
				<a href="http://easymock.org/">EasyMock</a>
				の利用をサポートします．
			</p>
			<p>
				EasyMock Class Extension も利用可能です．
				EasyMock Class Extension および
				CGLIB の Jar ファイルがクラスパスにあれば自動的に EasyMock Class Extension が利用されます．
			</p>
			<p>
				モックを作成するには，テストクラスや bean クラスのフィールドに
				<code>org.seasar.junitcdi.easymock.EasyMock</code>
				アノテーションを指定します．
			</p>
			<source><![CDATA[
@RunWith(CDI.class)
public class XxxTest {
    @EasyMock
    XxxService xxxService;
    ...
}
]]></source>
			<p>
				テストクラスや bean のインスタンスが CDI コンテナにより構築されて DI が行われるタイミングで，
				モックオブジェクトが作成されてフィールドに設定されます．
			</p>
			<p>
				モックの種類を切り替えるには，
				<code>EasyMock</code>
				アノテーションに
				<code>org.seasar.junitcdi.easymock.EasyMockType</code>
				を指定します．
			</p>
			<source><![CDATA[
@RunWith(CDI.class)
public class XxxTest {
    @EasyMock(EasyMockType.STRICT)
    XxxService xxxService
    ...
}
]]></source>
			<table border="1">
				<thead>
					<tr>
						<th>定数</th>
						<th>説明</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>DEFAULT</code>
						</td>
						<td>
							デフォルトです．
							モックは指定されていないメソッドが呼び出されると例外をスローしますが，メソッドの呼び出し順は無視します．
						</td>
					</tr>
					<tr>
						<td>
							<code>STRICT</code>
						</td>
						<td>
							モックは指定されていないメソッドが呼び出されると例外をスローします．
							指定されたメソッドであっても，指定された通りの順でメソッドが呼び出されないと例外をスローします．
						</td>
					</tr>
					<tr>
						<td>
							<code>NICE</code>
						</td>
						<td>
							モックは指定されていないメソッド呼び出しが行われても例外をスローしません．
						</td>
					</tr>
				</tbody>
			</table>
			<p>
				モックの振る舞いはテストクラスの
				<code>@Before</code>
				または
				<code>@BeforeTest</code>
				で注釈されたメソッドで記録します．
			</p>
			<source><![CDATA[
    @BeforeMethod
    public void beforeTest() {
        expect(mockService.findByName(...)).andReturn(...);
    }
}
]]></source>
			<p>
				テストメソッドでモックを利用したテストを実施します．
			</p>
			<source><![CDATA[
    @Test
    public void test() {
        assertThat(mockService.findByName(...), is(...));
    }
}
]]></source>
			<p>
				テストメソッドの実行が成功すると，モックが検証されます．
				テストメソッドが失敗した場合はモックの検証は行われません．
			</p>
		</section>

		<section name="Produces">
			<p>
				モックオブジェクトを bean としてプロデュースすることができます．
			</p>
			<source><![CDATA[
@RunWith(CDI.class)
public class HogeTest {
    @EasyMock
    @Produces
    XxxDao xxxDao;
    ...
}

public class XxxService {
    @Inject
    XxxDao xxxDao;
    ...
}
]]></source>
			<p>
				<code>XxxService</code>
				の
				<code>xxxDao</code>
				フィールドにはモックオブジェクトが DI されます．
			</p>
			<p>
				ただし，クラスパス中にモックオブジェクトと同じ型の bean (上の例では
				<code>XxxDao</code>
				) が存在すると，DI が曖昧で解決できないために例外が発生します．
				曖昧さを解決するには，
				<code>org.seasar.junitcdi.easymock.AlternativeMock</code>
				で注釈します (詳細は CDI 仕様書の「2.6. Alternatives」を参照してください)．
			</p>
			<p>
				以下の例では，クラスパス中に
				<code>XxxDao</code>
				クラスがあっても
				<code>XxxService</code>
				にはモックが DI されます．
			</p>
			<source><![CDATA[
@RunWith(CDI.class)
public class HogeTest {
    @EasyMock
    @AlternativeMock
    @Produces
    XxxDao xxxDao;
    
    @Inject
    XxxService xxxService;
    ...
}
]]></source>
		</section>

		<section name="EasyMockController">
			<p>
				テストメソッドの中でモックオブジェクトを作成したり，モックオブジェクトとの記録・再生・検証を繰り返すには，
				<code>org.seasar.junitcdi.easymock.EasyMockController</code>
				を使用します．
				<code>EasyMockController</code>
				は CDI で管理される bean であるため，DI により入手することができます．
			</p>
			<source><![CDATA[
    @Inject
    EasyMockController mockController;

    @Test
    public void test() throws Exception {
        mockController.reset();  // 記録モードに変更
        expected(mock.xxx(...)).andReturn(...);
        ...
        mockController.replay(); // 再生モードに変更
        mock.xxx();
        ...
        mockController.verify(); // 検証

        mockController.reset(); // 記録モードに戻す
        // 繰り返し
        ...
    }
]]></source>
			<p>
				<code>EasyMockController</code>
				の詳細は
				<a href="apidocs/org/seasar/junitcdi/easymock/EasyMockController.html">Javadoc</a>
				を参照してください．
			</p>
		</section>
	</body>
</document>